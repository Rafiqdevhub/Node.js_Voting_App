version: '3.8'

services:
  # Voting Application Service (Production)
  voting-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: voting-app-prod
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY}
      PORT: 5000
      DEBUG: ${DEBUG}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - voting-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Optional: Reverse Proxy (NGINX) for production
  nginx:
    image: nginx:alpine
    container_name: voting-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    networks:
      - voting-network
    depends_on:
      - voting-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - with-nginx  # Only start with: docker-compose --profile with-nginx up

  # Optional: Log aggregator for production monitoring
  logging:
    image: fluent/fluent-bit:2.2-alpine
    container_name: voting-logging-prod
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - voting-network
    profiles:
      - with-logging  # Only start with: docker-compose --profile with-logging up

networks:
  voting-network:
    driver: bridge
    name: voting-network-prod
    ipam:
      config:
        - subnet: 172.20.0.0/16